venv
pip install Django
django-admin startproject notes
cd notes

1. Створюємо суперкористувача

-1. Запустимо Docker-контейнер, щоб створити сервер PostgreSQL, наступною командою:
docker run --name noteapp-postgres -p 5433:5432 -e POSTGRES_PASSWORD=567234 -e POSTGRES_DB=noteapp-postgres -d postgres
-2.  В settings.py замінити змінну DATABASES (з SQLite на PostgreSQL)
-3. pip install psycopg2
-4. застосувати початкову міграцію:
python manage.py migrate
--> answer in terminal:
"""...Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK..."""
-5. Нарешті створюємо суперюзера: 
python manage.py createsuperuser
Введіть в терміналі ім'я користувача, його email та пароль. 
Username (leave blank to use 'serhii'): yuliia
Email address: arwen.vogel@gmail.com
Password: dysgenesis88

2. Перший запуск застосунку

-1. python manage.py runserver
-2. http://127.0.0.1:8000/admin/
-3. входимо в систему з обліковими даними суперкористувача, які ми створили вище
-4. yuliia i dysgenesis88
-5. Попереднє налаштування проекту завершено, можна зупинити сервер і перейти до створення застосунку. 
У терміналі натискаємо на Ctrl+C і припиняємо роботу сервера.

3. Створення застосунку noteapp

3.1. python manage.py startapp noteapp
3.2. в settings.py додати наш застосунок noteapp в константу INSTALLED_APPS

4. Створення моделей

4.1. Відкриваємо файл noteapp/models.py та додаємо наші моделі.
4.2. Виконання міграцій: python manage.py makemigrations
4.3. створення таблиць у БД: python manage.py migrate.
Django повинен після цих операцій створити три таблиці у базі даних: подив. у DBeaver: на Tables правою кнопкою
миші --> View Diagram
4.4. Реєстрація моделей у застосунку: у файлі noteapp/admin.py

5. Додавання головної сторінки

5.1. Всередині папки noteapp створимо вкладену папку templates/noteapp, де зберігатимемо шаблони нашого 
застосунку. Туди ми помістимо шаблон index.html.
5.2. підемо і створимо всередині файлу noteapp/views.py функцію main для обробки запитів до застосунку.
5.3. додати маршрутизацію всередину файлу notes/urls.py
5.4. створити файл noteapp/urls.py та додати маршрут
5.5. Запустимо сервер: python manage.py runserver  
і перейдемо за адресою `http://localhost:8000/` : побачимо повідомлення "Main page"

6. Додавання тегів

6.1. Оскільки шаблони сторінок нашого застосунку використовуватимуть схожий код, ми спочатку створюємо 
базовий шаблон base.html, від якого будемо наслідувати інші шаблони:
notes/noteapp/templates/noteapp/base.html
6.2. Cтворимо файл style.css за шляхом notes/noteapp/static/noteapp/style.css
Ці стилі ми будемо використовувати для повідомлень у шаблонах: червоний колір crimson ми використовуємо 
для виведення помилок, а колір green - для виведення успішних операцій.
6.3. додати шаблон noteapp/tag.html у стилі Django
6.4. створти файл з формами forms.py всередині застосунку noteapp
6.5. Обробник маршруту
Для додавання тегів у нашому застосунку необхідно відкрити файл noteapp/views.py та додати функцію обробник tag, 
яка відображатиме шаблон tag.html та обробляти POST запити на створення нових тегів.
6.6. додати всередину файлу noteapp/urls.py маршрут з обробником
Тепер ми можемо додавати будь-яку кількість тегів у нашому застосунку.

7. Додавання нотаток

7.1. html-Шаблон для додавання нотатки notes/noteapp/templates/noteapp/note.html
7.2. створюємо форму для нотаток всередині файлу forms.py.
7.3. Додамо функцію представлення нотатки note(request) у файл noteapp/views.py
7.4. Всередині файлу noteapp/urls.py додамо маршрут обробки нотаток
7.5. Попередньо створимо кілька тегів і виконаємо створення тестової нотатки

8. Сторінка відображення нотатки

Для відображення нашої нотатки ми будемо використовувати маршрут http://127.0.0.1:8000/detail/<int:note_id>, 
де <int:note_id> - це id, унікальний ідентифікатор нотатки в базі даних.

8.1. Додамо функцію detail для виведення шаблону нотатки у файл noteapp/views.py
8.2. Всередині файлу noteapp/urls.py додамо новий маршрут відображення вмісту нотатки
8.3. Шаблон відображення нотатки noteapp/templates/noteapp/detail.html
8.4. механізм створення власних тегів для шаблонів:
- створити папку templatetags і в ній файл extract_tags.py, назва файлу довільна, 
notes/noteapp/templatetags/extract_tags.py
- можна перезапустити сервер і піти попереглядати наші нотатки в браузері.

9. Відображення списку нотаток (буде на головній сторінці index.html)

9.1. змінимо представлення для функції main.
9.2. Також у файлі представлень views.py додамо дві функції: set_done та delete_note
9.3. Додамо маршрути для виклику цих функцій у файлі noteapp/urls.py
9.4. Змінюємо шаблон index.html
Тепер можнаи на головній сторінці побачити список всіх нотаток і там же відзначати їх як виконані.

10. Додаємо користувачів - необхідно реалізувати механізм реєстрації нових користувачів та входу до 
нашого застосунку.

10.1. Створимо новий застосунок users:  python manage.py startapp users
10.2. в settings.py додаємо наш застосунок users у константу INSTALLED_APPS
10.3. У модулі notes/urls.py додамо маршрут на наш новий застосунок: path('users/', include('users.urls'))
10.4. Створимо модуль forms.py всередині застосунку users
10.5. Перейдемо до views.py застосунку users і скористаємося тільки-но створеною нами формою. Створимо обробник 
маршруту signupuser
10.6. Всередині папки users створимо вкладену папку templates/users, де зберігатимемо шаблони нашого застосунку. 
Додамо шаблон signup.html
10.7. Останній штрих - створюємо файл urls.py всередині застосунку users і поміщаємо туди маршрут реєстрації 
користувача
Готово! Можна реєструвати користувачів у додатку.

11. Аутентифікація 

11.1. Додаємо class LoginForm у форму для аутентифікації - файл users/forms.py 
11.2. Шаблон login.html
11.3. Перейдемо до views.py застосунку users і створимо обробник маршруту loginuser
11.4. Додаємо маршрут для входу користувачів у файл urls.py

12. Вихід користувача

12.1. Бажано користувачеві давати можливість виходу із застосунку, не чекаючи завершення сеансу користувача. 
Для цього ми додамо маршрут /users/logout та функцію обробник для нього - notes/users/views.py
12.2. Додаємо маршрут у файл urls.py

13. Змінюємо головну сторінку, щоб ми могли потрапляти на сторінки реєстрації та логіну

13.1. Змінимо меню навігації у шаблоні головної сторінки noteapp/index.html, щоб ми могли потрапляти на сторінки 
реєстрації та логіну.
  Тепер у меню є привітання для користувача <li>Welcome <b>{{user.username}}!</b></li> та всі посилання для 
переходу на потрібні сторінки.

14. З'єднуємо користувачів та нотатки

14.1.  змінити моделі застосунку noteapp: notes/noteapp/models.py - Зв'язуємо теги та нотатки відношенням 
"один до багатьох"
14.2. Створюємо та виконуємо міграції:   python manage.py makemigrations
python manage.py migrate   
14.3. Зміна представлень
  - Виведення головної сторінки index.html 
  - Робота із тегами. Кожен обробник потрібно обгорнути декоратором @login_required, тому що тільки зареєстровані 
  користувачі можуть працювати з нотатками - файл notes/views.py

15. Профіль користувача

15.1. створимо представлення профілю def profile всередині users/views.py
15.2. додайте маршрут для перегляду профілю - notes/users/urls.py
15.3. створити шаблон для представлення в каталозі шаблонів застосунку користувачів notes/users/templates/users
15.4. Модель профілю notes/users/models.py розширити користувальницької моделі за допомогою зв'язку один-до-одного.
notes/users/models.py
15.5. pip install pillow
15.6. реєстрація моделі профілю всередині програми admin.py
15.7. Щоб зміни набули чинності в нашій базі даних, давайте виконаємо міграцію.
python manage.py makemigrations
python manage.py migrate

16. Робота з аватаром користувача

16.1. встановити значення для констант MEDIA_URL та MEDIA_ROOT в налаштуваннях — файл notes/notes/settings.py
16.2. необхідно налаштувати urls.py проекту для обслуговування завантажених користувачем медіафайлів під 
час розробки (коли debug=True). notes/notes/urls.py
16.3. Створіть каталог media всередині кореня проекту та помістіть туди будь-яке зображення, яке буде 
зображенням профілю за замовчуванням. У нашому випадку це буде гусак — notes/media/default_avatar.png

17. Сигнали в Джанго
необхідно, щоб профіль створювався автоматично під час реєстрації нового користувача. Для цього в Django 
використовують сигнали — Signals.

17.1. створіть файл signals.py всередині застосунку користувача.
notes/users/signals.py
17.2. підключення приймачів ready у файл apps.py шляхом імпорту модуля сигналів. notes/users/apps.py

18. Форма профілю

18.1. Створимо форму, де користувачі оновлюватимуть свій профіль і відображатимуть інформацію всередині шаблону.
notes/users/forms.py
18.2. оновимо представлення, щоб додати щойно створені форми. notes/users/views.py
18.3. Останній штрих - додамо в меню на головній сторінці перехід на сторінку профілю. 

_________________________________________________________________________________________________________________
tip
Насправді наш застосунок можна трохи покращити. Як самостійне завдання ми рекомендуємо вам дописати наступний 
функціонал:

Зробіть можливість видаляти і виконані завдання (зараз застосунок видаляє тільки невиконані нотатки).
Реалізуйте можливість, окрім виведення на головній сторінці всіх нотаток, виведення лише завершених або 
незавершених нотаток на вибір.
Реалізуйте можливість редагування та видалення тегів та окремий перегляд усіх своїх тегів.
Реалізуйте можливість редагування незавершених нотаток

